<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1537261019253">{:repl-history {:ide [], :local [&quot;go&quot; &quot;(go)&quot; &quot;ch&quot; &quot;(send-a-message\n \&quot;my_topic\&quot;\n :some-key\n {:some-val 1})&quot; &quot;(send-a-message\n \&quot;my_topic\&quot;\n nil\n {:some-val 1})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :value {:some-val 222}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key \&quot;some\&quot;\n  :value 3.14})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key 6\n  :value 3.14})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key \&quot;6\&quot;\n  :value 3.14})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key :a\n  :value 3.14})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :value 3.14})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :value \&quot;fjkdj\&quot;})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key 1\n  :value {:some-key 1}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key \&quot;1\&quot;\n  :value {:some-key 1}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key :a\n  :value {:some-key 1}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :value {:some-key 1}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :value {:some-key 2}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key :a\n  :value {:some-key 2}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key \&quot;a\&quot;\n  :value {:some-key 2}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key \&quot;a\&quot;\n  :value {:some-key 77}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key 7\n  :value {:some-key 7}})&quot; &quot;(send-a-message\n {:topic \&quot;my_topic\&quot;\n  :key \&quot;a\&quot;\n  :value {:some-key 7}})&quot; &quot;(produce-a-message\n {:topic my-topic\n  :value {:simple 1}})&quot; &quot;(go (throw (Exception. \&quot;OOOOOOOOOOOOHHHH NNOOOOOOOOO!!\&quot;)))&quot; &quot;(go\n  (try\n    (throw (Exception. \&quot;Not again!!\&quot;))\n    (catch Exception e\n      (&gt;! ex-chan e))))&quot; &quot;(produce-a-message\n {:topic my-topic\n  :key 7\n  :value {:simple 1}})&quot; &quot;(produce-a-message\n {:topic my-topic\n  :key :a\n  :value {:simple 1}})&quot; &quot;(async/consumer {:bootstrap.servers \&quot;localhost:9092\&quot;\n                 ;:group.id          (str (UUID/randomUUID))\n                 :dubplex? true\n                 }\n                #_:keyword\n                #_:edn\n                (client/keyword-deserializer)\n                (client/edn-deserializer))&quot; &quot;(async/consumer {:bootstrap.servers \&quot;localhost:9092\&quot;\n                 ;:group.id          (str (UUID/randomUUID))\n                 :duplex? true\n                 }\n                #_:keyword\n                #_:edn\n                (client/keyword-deserializer)\n                (client/edn-deserializer))&quot; &quot;(produce-a-message\n {:topic \&quot;my_topic\&quot;\n  :value 1})&quot; &quot;(a/put! ch {:op :partitions-for :topic topic})&quot; &quot;(a/put! ch {:op :commit})&quot; &quot;(reify\n  Serializer)&quot; &quot;(edn-serializer)&quot; &quot;(type 1)&quot; &quot;(type [])&quot; &quot;(type edn-serializer)&quot; &quot;(type (edn-serializer))&quot; &quot;(instance? \n (edn-serializer)\n Serializer)&quot; &quot;(instance?\n Serializer\n (edn-serializer)\n )&quot; &quot;(instance?\n java.lang.Long\n (edn-serializer)\n )&quot; &quot;(require 'clojure.reflect)&quot; &quot;(require '[clojure.reflect :as r])&quot; &quot;(r/reflect ser)&quot; &quot;(.configure ser)&quot; &quot;(def ser (edn-serializer))&quot; &quot;(.configure ser {} false)&quot;], :remote []}}</component>
</project>